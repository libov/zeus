      DOUBLE PRECISION FUNCTION SIG0(XX,VWGT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION XX(10)
      DIMENSION DVEC(10),BET(3)
      DIMENSION P1(0:3),P2(0:3),P3(0:3),Q(0:3)
      DIMENSION PPRO(0:3),PIEL(0:3),PSEL(0:3),PGAM(0:3)

      COMMON/BEAM/EPRO,EIEL
      COMMON/INVAR/XBJ,XIMIN,XM2,Q2
      COMMON/FACTORS/EH2,CA,CF,XKGP,XKQP,N
      COMMON/PDFG/GLUE
      COMMON/FLAGS/ISCALER,ISCALEF,IALPHAS,IFRAG
      COMMON/LIMITS/Q2MIN,Q2MAX,XMIN,XMAX,YMIN,YMAX
      COMMON/FRAGP/EPS,HFRAC,XMD,ISL
      COMMON/MOMFRAC/XI

C Adopted from Massimo
      INTEGER IFL
      COMMON /DOFL/ IFL

C For missing loop in initial state gluon
      DOUBLE PRECISION CORR,B0Q
      COMMON/QUARKF/IQUARK

      PARAMETER (PI=3.141592653589793D0)
      PARAMETER (XME2=2.6D-7)
      PARAMETER (HBARC2=0.3894D6)
      PARAMETER (DTEST=1D-7)

C. Y
      SS=4D0*EPRO*EIEL
      YU=MIN(YMAX,1D0)
      YL=MAX(YMIN,4D0*XM2/SS)
      XJACY=YU-YL
      Y=YL+XJACY*XX(1)
      OMY=1D0-Y
C. Q2
      Q2U=MIN(Y*SS-4D0*XM2,Q2MAX)
      Q2L=MAX(XME2*Y*Y/(1D0-Y),Q2MIN)
      XJACQ2=Q2U-Q2L
      Q2=Q2L+XJACQ2*XX(2)
C. CALCULATE XBJ AND CUT ON IT 
      XBJ=Q2/(Y*SS)
C      IF(XBJ.LE.MAX(0D0,XMIN)) write(6,*) 'XBJ',XBJ, 'Q2',Q2
C      IF(XBJ.LE.MAX(0D0,XMIN)) write(6,*) 'Y',Y, 'SS',SS
C      IF(XBJ.LE.MAX(0D0,XMIN)) write(6,*) 'YU',YU, 'YL',YL
C      IF(XBJ.LE.MAX(0D0,XMIN)) write(6,*) 'XJBnew',Q2/(Y*SS)
      IF( (XBJ.LE.MAX(0D0,XMIN)).OR.(XBJ.GE.MIN(1D0,XMAX) ))GOTO 1000
C      IF(XBJ.GE.MAX(0D0,XMIN)) write(6,*) 'In the range:'
C      IF(XBJ.GE.MAX(0D0,XMIN)) write(6,*) 'XBJ',XBJ, 'Q2',Q2
C      IF(XBJ.GE.MAX(0D0,XMIN)) write(6,*) 'Y',Y, 'SS',SS
C      IF(XBJ.GE.MAX(0D0,XMIN)) write(6,*) 'YU',YU, 'YL',YL
C      IF(XBJ.GE.MAX(0D0,XMIN)) write(6,*) 'XJBnew',Q2/(Y*SS)
C. APPLY MAPPING ON XI
      XIMIN = XBJ*(4D0*XM2+Q2)/Q2
      IF(XIMIN.GE.1D0) write(6,*) 'Ximin',XIMIN
      IF(XIMIN.GE.1D0)GOTO 1000
      CALL BRM48(DVEC,1)
      CALL MAP(2D0,DVEC(1),XIMIN,1D0,XI,XJACXI)
C. CALCULATE ENERGIES
      SH = Q2*(1D0-XBJ)/XBJ
      SPH = SH + Q2
      SP = XI*SPH
      S = SP - Q2
C. CHECK IF ABOVE THRESHOLD
      RHO = 4D0*XM2/S
      IF(RHO.GE.1D0) write(6,*) 'Rho',RHO
      IF(RHO.GE.1D0)GOTO 1000
      BETA = DSQRT(1D0-RHO)
C. PARTONIC CM ANGLE
      TH1=PI*XX(3)
      CTH1=DCOS(TH1)
      STH1=DSIN(TH1)
      XJACTH=PI*STH1
C. JACOBIAN BETWEEN {R1,R2,R3,R4} <-> {Q2,YBJ,XI,TH1}
      XJAC = XJACQ2*XJACY*XJACXI*XJACTH
C. CONSTRUCT P1(Q) AND P2(QBAR) IN PARTON-GAMMA* CMS
      SRS=0.5D0*DSQRT(S)
C      Q(0)=(S-Q2)/(4D0*SRS)
C      Q(1)=0D0
C      Q(2)=0D0
C      Q(3)=-(S+Q2)/(4D0*SRS)
C*TC>
      P1(0)=0.
      P1(1)=0.
      P1(2)=0.
      P1(3)=0.
C*TC<
C. RANDOM ROTATION ABOUT Z AXIS
     
      CALL BRM48(DVEC,1)
      PHI=2D0*PI*DVEC(1)
      P1(0)=SRS
      P1(1)=SRS*BETA*STH1*DCOS(PHI)
      P1(2)=SRS*BETA*STH1*DSIN(PHI)
      P1(3)=SRS*BETA*CTH1
      P2(0)=+P1(0)
      P2(1)=-P1(1)
      P2(2)=-P1(2)
      P2(3)=-P1(3)
      T1 = -0.5D0*SP*(1D0-BETA*CTH1)
C. BOOST P1(Q) AND P2(QBAR) TO PROTON-GAMMA* CMS
      BET(1)=0D0
      BET(2)=0D0
      BET(3)=(XI-1D0)/(1D0+XI-2D0*XBJ)
C      CALL BOOST(-1,BET,Q)
C      QTEST0=DABS(Q(0)-(SH-Q2)/(2D0*DSQRT(SH)))
C      QTEST1=DABS(Q(1))
C      QTEST2=DABS(Q(2))
C      QTEST3=DABS(Q(3)+(SH+Q2)/(2D0*DSQRT(SH)))
C      IF( (QTEST0.GT.DTEST).OR.(QTEST1.GT.DTEST).OR.
C     &    (QTEST2.GT.DTEST).OR.(QTEST3.GT.DTEST) )THEN
C         WRITE(*,*) 'TROUBLE IN SIG0 ON FIRST BOOST'
C         WRITE(*,*) QTEST0,QTEST1,QTEST2,QTEST3
C         STOP
C      ENDIF
      CALL BOOST(-1,BET,P1)
      CALL BOOST(-1,BET,P2)

C. SET AUX SCALE TO W2
C*TC>
C      XMX2=max(p1(1)**2+p1(2)**2,p2(1)**2+p2(2)**2)
C      XMX2=p1(1)**2+p1(2)**2
*
       XMX2=(P1(1)**2+P1(2)**2+P2(1)**2+P2(2)**2)/2.
C*TC<
C
C. BOOST P1(Q) AND P2(QBAR) TO LAB FRAME
C. FIRST CONSTRUCT P(PROTON) AND Q(PHOTON) IN LAB FRAME
C. H1 AND ZEUS TAKE PROTON IN +Z DIRECTION
      PPRO(0)=EPRO
      PPRO(1)=0D0
      PPRO(2)=0D0
      PPRO(3)=EPRO
C. AND INCIDENT ELECTRON IN -Z DIRECTION
      PIEL(0)=EIEL
      PIEL(1)=0D0
      PIEL(2)=0D0
      PIEL(3)=-EIEL
C. THE SCATTERED ELECTRON ENERGY AND ANGLE ARE GIVEN 
C. IN TERMS OF Q2,Y AND ENERGY OF INCIDENT ELECTRON
      ESEL  =(Q2+4D0*EIEL*EIEL*OMY)/(4D0*EIEL)
      CTHSEL=(Q2-4D0*EIEL*EIEL*OMY)/(Q2+4D0*EIEL*EIEL*OMY)
      STHSEL=DSQRT(1D0-CTHSEL*CTHSEL)
      PSEL(0)=ESEL
      PSEL(1)=0D0
      PSEL(2)=ESEL*STHSEL
      PSEL(3)=ESEL*CTHSEL
C. NOW TO FIND PHOTON FOUR VECTOR
      DO 10 I=0,3
 10   PGAM(I)=PIEL(I)-PSEL(I)
C. SET UP BOOST TO LAB FRAME
      DO 15 I=1,3
 15   BET(I)=(PPRO(I)+PGAM(I))/(PPRO(0)+PGAM(0))
C. FIND BOOST DEPENDENT ROTATION ANGLE
      CALL RANGLE(PGAM,BET,COSA,SINA)
C. DO THE ROTATION THEN BOOST
C      CALL ROT(+1,Q,COSA,SINA)
C      CALL BOOST(-1,BET,Q)
C      DO 20 I=0,3
C        IF(DABS(Q(I)-PGAM(I)).GT.DTEST)THEN
C           WRITE(*,*) 'TROUBLE IN ROTATION AND BOOST'
C           WRITE(*,*) I,DABS(Q(I)-PGAM(I))
C        ENDIF
C 20   CONTINUE
      CALL ROT(+1,P1,COSA,SINA)
      CALL BOOST(-1,BET,P1)
      CALL ROT(+1,P2,COSA,SINA)
      CALL BOOST(-1,BET,P2)
C. PETERSON FRAGMENTATION
      IF (IFRAG.EQ.1) THEN
         IF(ISL.EQ.0)THEN
            CALL BRM48(DVEC,2)
            CALL FRAG(DVEC,P1,P2)
         ELSEIF(ISL.EQ.1)THEN
            CALL BRM48(DVEC,10)
            CALL FRAG(DVEC,P1,P2)
         ELSE
            WRITE(*,*) 'UNKNOWN ISL: ',ISL
            STOP
         ENDIF
      ENDIF
C. SET RENORMALIZATION SCALE
      CALL MSCALE(ISCALER,Q2,XM2,XMX2,XMUR2)
C. SET MASS FACTORIZATION SCALE
      CALL MSCALE(ISCALEF,Q2,XM2,XMX2,XMUF2)
C. CALCULATE STRONG COUPLING
      ALFAS=ALPHAS(IALPHAS,XMUR2,NEFF)
C. CALCULATE EM COUPLING
      AEM2=HWUAEM(XMUR2)**2
C. FILL PDFS
      CALL PDF(XI,XMUF2)
C. CALL STRUCTURE FUNCTIONS
      B0Q = -2.0/3.0
      IF (IQUARK.EQ.1) THEN
        CORR = 1 + B0Q * LOG(XMUR2 / XM2) * ALFAS / (4D0*PI)
      ELSEIF (IQUARK.EQ.2) THEN
        CORR = 1 + B0Q * LOG(XMUR2 / XM2) * ALFAS / (4D0*PI)
     &           + B0Q * LOG(XMUR2 / 2.25D0) * ALFAS / (4D0*PI)
      ENDIF
C     TF=Q2*XKGP*ALFAS*EH2*N*CF*BETA*GLUE/(2D0*PI*SP*XI)
      TF=Q2*XKGP*ALFAS*CORR*EH2*N*CF*BETA*GLUE/(2D0*PI*SP*XI)
      FG=TF*BGQED(T1,SP,XM2,Q2)
      FL=TF*BLQED(T1,SP,XM2,Q2)
      F2=0.5D0*FG+1.5D0*FL
C      F2=0D0
C      FL=0D0
C Adopted from Massimo
      IF (IFL.EQ.0) FL=0.D0
      IF (IFL.EQ.2) F2=0.D0
      SIG0 = (1D0+OMY*OMY)*F2-Y*Y*FL
C. PUT IT ALL TOGETHER AND FIX UNITS TO NB
      SIG0 = 2D0*PI*AEM2*HBARC2*SIG0*XJAC/(Y*Q2*Q2)
C. DIVIDE OUT BY THE NUMBER OF EVENTS
      WGT = SIG0*VWGT
      CALL FHIST(WGT,P1,P2,P3)
      SIG0 = WGT/VWGT
      RETURN
C. REJECTED EVENTS GET WEIGHT ZERO
 1000 CONTINUE
      SIG0=0D0
      RETURN
      END

      DOUBLE PRECISION FUNCTION BGQED(T1,SP,M2,Q2)
C
C THIS IS B_G,QED OF OUR PAPER.
C
      IMPLICIT DOUBLE PRECISION (A-Z)
      U1 = - SP - T1
      U12 = U1*U1
      T12 = T1*T1
      S = SP - Q2
      S2 = S*S
      M4=M2*M2
      TERM = 64.D0*M4/U1/T1+32.D0*M4/U12+32.D0*M4/T12+16.D0*M2*U1/T12
     &     + 48.D0*M2/U1+16.D0*M2*T1/U12+16.D0*M2*S/U12+48.D0*M2/T1
     &     + 16.D0*M2*S/T12-8.D0*U1/T1-8.D0*T1/U1-16.D0*S2/U1/T1
     &     - 16.D0*S/U1 - 16.D0*S/T1
      BGQED = -0.125D0*TERM
      RETURN
      END

      DOUBLE PRECISION FUNCTION BLQED(T1,SP,M2,Q2)
C
C THIS IS B_L,QED OF OUR PAPER.
C
      IMPLICIT DOUBLE PRECISION (A-Z)
      U1 = - SP - T1
      SP2 = SP*SP
      S = SP - Q2
      TERM = -Q2*M2/SP2*(32.D0*U1/T1+32.D0*T1/U1+64.D0-32.D0*S/M2)
      BLQED = 0.125D0*TERM
      RETURN
      END
